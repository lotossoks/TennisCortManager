import json
from pathlib import Path
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup
from telebot.apihelper import ApiTelegramException


def setting_standart_schedule(bot, message, set_exist):
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏/–∏–ª–∏
    –î–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–∑–¥–∞—é—â–µ–≥–æ—Å—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    """
    bot.send_message(
        message.chat.id,
        "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–ª–æ—Ç."
        + "–ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –Ω–∞–∂–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ì–æ—Ç–æ–≤–æ'",
        reply_markup=generate_reservation_message_change(set_exist=set_exist),
    )


def generate_reservation_message_change(set_exist, day=None):
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    """
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    if set_exist:
        # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ proc_tech.json
        with Path("data/tech.json").open("r", encoding="utf8") as tech_file:
            tech = json.load(tech_file)
        Path("data/proc_tech.json").touch(exist_ok=True)
        with Path("data/proc_tech.json").open("w", encoding="utf8") as proc_tech_file:
            json.dump(tech, proc_tech_file, ensure_ascii=False)
    # –î–∞–Ω–Ω—ã–µ –∏–∑ –Ω–∞—Å—Ç—Ä–∞–µ–º–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    with Path("data/proc_tech.json").open("r", encoding="utf8") as proc_tech_file:
        proc_tech = json.load(proc_tech_file)
    # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ day, —É—Å—Ç–∞–Ω–∞–≤–ª–∏—è–≤–∞–µ—Ç—Å—è –ø–µ—Ä–≤—ã–π
    if not day:
        day = list(proc_tech["standart_schedule"].keys())[0]
    markup = InlineKeyboardMarkup()

    for hour in proc_tech["standart_schedule"][day]:
        # –î–æ–±–∞–≤–ª–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if not proc_tech["standart_schedule"][day][hour]["free"]:
            button_text = f"üî¥{hour}"
        else:
            button_text = f"üÜì{hour}"
        button = InlineKeyboardButton(
            text=button_text, callback_data=f"RC_{day}_{hour}"
        )
        markup.row(button)
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Å –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏ –Ω–∞ –¥—Ä—É–≥–∏–µ –¥–Ω–∏
    day_buttons = []
    for day_name in list(proc_tech["standart_schedule"].keys()):
        if day_name == day:
            button = InlineKeyboardButton(
                text=f"üìç{day_name[:2]}",
                callback_data=f"IC_{day_name}",
            )
        else:
            button = InlineKeyboardButton(
                text=day_name[:2],
                callback_data=f"DC_{day_name}",
            )
        day_buttons.append(button)
    markup.row(*day_buttons)
    markup.add(InlineKeyboardButton(text="–ó–∞–∫–æ–Ω—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É", callback_data="FC_"))
    return markup


def setting_callback(bot, call):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏—Ö callback –æ—Ç generate_reservation_message_change
    """
    text = call.data
    message_updated = False
    if text.startswith("RC_"):
        with Path("data/proc_tech.json").open("r", encoding="utf8") as proc_tech_file:
            proc_tech = json.load(proc_tech_file)
        _, day, hour = text.split("_")
        proc_tech["standart_schedule"][day][hour]["free"] = not (
            proc_tech["standart_schedule"][day][hour]["free"]
        )
        with Path("data/proc_tech.json").open("w", encoding="utf8") as proc_tech_file:
            json.dump(proc_tech, proc_tech_file)
        message_updated = True
    elif text.startswith("IC_"):
        day = text.split("_")[1]
        bot.answer_callback_query(
            call.id,
            f"–°–µ–π—á–∞—Å –≤—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ –∏–∑ —Å–ª–æ—Ç–æ–≤ –Ω–∞ {day}.",
        )
    elif text.startswith("DC_"):
        day = text.split("_")[1]
        message_updated = True
    elif text.startswith("FC_"):
        bot.delete_message(call.message.chat.id, call.message.message_id)
        with Path("data/tech.json").open("r", encoding="utf8") as tech_file:
            tech = json.load(tech_file)
        with Path("data/proc_tech.json").open("r", encoding="utf8") as proc_tech_file:
            proc_tech = json.load(proc_tech_file)
        tech["standart_schedule"] = proc_tech["standart_schedule"]
        tech["n_weeks_show"] = proc_tech["n_weeks_show"]
        with Path("data/tech.json").open("w", encoding="utf8") as tech_file:
            json.dump(tech, tech_file)
        Path("data/proc_tech.json").unlink()
        bot.send_message(
            call.message.chat.id,
            "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.",
        )
    if message_updated:
        try:
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=generate_reservation_message_change(
                    set_exist=False, day=day
                ),
                text=f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ—Ç –Ω–∞ {day}",
            )
        except ApiTelegramException as e:
            if "message is not modified" not in str(e):
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
